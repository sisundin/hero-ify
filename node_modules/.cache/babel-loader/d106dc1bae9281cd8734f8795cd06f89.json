{"ast":null,"code":"import React from \"react\";\nimport { heroApihost, HeroApiAccessKey, firebaseConfig, token } from \"./apiConfig\";\nimport firebase from \"firebase\";\nimport Spotify from 'spotify-web-api-js';\nconst spotifyApi = new Spotify();\n\nclass HeroIfyModel extends React.Component {\n  constructor() {\n    super();\n    this.subscribers = [];\n    this.hero = \"\";\n    this.playlistAttributes = {\n      userID: \"\",\n      genres: [],\n      pepLevel: \"\"\n    };\n    firebase.initializeApp(firebaseConfig);\n    firebase.auth().signInWithCustomToken(token).catch(function (error) {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message; // ...\n    });\n    this.db = firebase.firestore();\n  }\n\n  addObserver(callback) {\n    this.subscribers.push(callback);\n  }\n\n  removeObserver(callback) {\n    callback = this.subscribers.filter(o => o !== callback);\n  }\n\n  notifyObservers(whatHappened) {\n    this.subscribers.forEach(function (callback) {\n      callback(whatHappened);\n    });\n  }\n\n  getHeroData(string) {\n    return fetch(\"https://superhero-search.p.rapidapi.com/?\" + string, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": heroApihost,\n        \"x-rapidapi-key\": HeroApiAccessKey\n      }\n    }).then(response => this.handleHTTPError(response)).then(response => response.json()).catch(error => console.log(error)); ///const http = new XMLHttpRequest();\n    ///http.open(\"GET\", heroApiENDPOINT+HeroApiAccessToken+string);\n    ///http.send();\n    ///http.onload = () => console.log(http.responseText)\n    /// return fetch(heroApiENDPOINT+HeroApiAccessToken+string, {\n    ///    \"method\": \"GET\",\n    ///    }).then(response => this.handleHTTPError(response))\n    ///.then(response => response.json()).then(response => console.log(response))\n    ///.catch(error => console.log(error));\n  }\n\n  handleHTTPError(response) {\n    if (response.ok) {\n      return response;\n    }\n\n    throw Error(response.statusText);\n  } /// Sök bara på namn i en sträng\n\n\n  searchHero(name) {\n    let data = this.getHeroData(\"hero=\" + name);\n    console.log(data);\n    return data;\n  } /// Sök bara på id i en sträng\n\n\n  getHeronID(id) {\n    let data = this.getHeroData(\"id=\" + id);\n    return data;\n  }\n\n  addHero(id) {\n    this.hero = id;\n    notifyObservers(\"hero was added\");\n  }\n\n  heroGenres(powerstats) {\n    /// powerstats = {\"intelligence\":\"81\",\"strength\":\"40\",\"speed\":\"29\",\"durability\":\"55\",\"power\":\"63\",\"combat\":\"90\"};\n    let allstats = powerstats.intelligence + powerstats.strength + powerstats.speed + powerstats.durability + powerstats.combat;\n    let genres = {\n      \"classical\": powerstats.intelligence / allstats,\n      \"punk\": powerstats.strength / allstats,\n      \"pop\": powerstats.speed / allstats,\n      \"lowfy beats\": powerstats.durability / allstats,\n      \"electronic dance\": powerstats.power / allstats,\n      \"hip hop\": powerstats.combat / allstats\n    };\n    return genres;\n  } //getPlaylists NEEDS RENDER PROMIS\n\n\n  getOthersPlaylistsfromdatabase() {\n    let scoreboard = [];\n    this.db.collection(\"hero-ify\").orderBy().limit(10).get().then(snapshot => {\n      snapshot.forEach(doc => {\n        scoreboard.push({\n          \"Hero\": doc.Hero,\n          \"PlaylistLink\": doc.PlaylistLink,\n          \"User\": doc.User\n        });\n      });\n    });\n    return scoreboard;\n  } //add a playlist to firebase\n\n\n  addYourplaylistToDatabase(heroname, playlistlink, user) {\n    this.db.collection(\"hero-ify\").doc().set({\n      Hero: heroname,\n      PlaylistLink: playlistlink,\n      User: user\n    });\n  } //spotify playlist function\n\n\n  spotifyApiConnect() {} //generates a link to create spotify playlist from\n\n\n  generateSpotifyPlaylist() {}\n\n  getMyTopTracks() {\n    var alltrackstoptracks = [];\n    spotifyApi.getMyTopTracks({\n      limit: 100\n    }).then(response => {\n      for (var i = 0, l = response.items.length; i < l; i++) {\n        alltrackstoptracks.push(response.items[i]);\n      }\n\n      this.setState({\n        topTracks: alltrackstoptracks\n      });\n    });\n  }\n\n}\n\nconst heroifyModel = new HeroIfyModel();\nexport default heroifyModel;","map":{"version":3,"sources":["/Users/simonsundin/Documents/GitHub/hero-ify/src/modelandconfig/model.js"],"names":["React","heroApihost","HeroApiAccessKey","firebaseConfig","token","firebase","Spotify","spotifyApi","HeroIfyModel","Component","constructor","subscribers","hero","playlistAttributes","userID","genres","pepLevel","initializeApp","auth","signInWithCustomToken","catch","error","errorCode","code","errorMessage","message","db","firestore","addObserver","callback","push","removeObserver","filter","o","notifyObservers","whatHappened","forEach","getHeroData","string","fetch","then","response","handleHTTPError","json","console","log","ok","Error","statusText","searchHero","name","data","getHeronID","id","addHero","heroGenres","powerstats","allstats","intelligence","strength","speed","durability","combat","power","getOthersPlaylistsfromdatabase","scoreboard","collection","orderBy","limit","get","snapshot","doc","Hero","PlaylistLink","User","addYourplaylistToDatabase","heroname","playlistlink","user","set","spotifyApiConnect","generateSpotifyPlaylist","getMyTopTracks","alltrackstoptracks","i","l","items","length","setState","topTracks","heroifyModel"],"mappings":"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","sourcesContent":["import React  from \"react\";\nimport {heroApihost, HeroApiAccessKey, firebaseConfig, token} from \"./apiConfig\"\nimport firebase from \"firebase\";\nimport Spotify from 'spotify-web-api-js'\nconst spotifyApi = new Spotify()\n\nclass HeroIfyModel extends React.Component {\n  constructor () {\n    super()\n    this.subscribers = []\n    this.hero = \"\"\n    this.playlistAttributes = {userID:\"\", genres: [], pepLevel:\"\" }\n    firebase.initializeApp(firebaseConfig)\n    firebase.auth().signInWithCustomToken(token).catch(function(error) {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        // ...\n      });\n    this.db = firebase.firestore();\n\n    \n}\n\n  addObserver (callback) {\n    this.subscribers.push(callback)\n  }\n\n    removeObserver (callback) {\n    callback = this.subscribers.filter(o => o !== callback);\n    };\n   \n    notifyObservers(whatHappened){\n        this.subscribers.forEach(function(callback){ \n            callback(whatHappened);\n       });\n    }\n\n       \n    getHeroData(string) {\n        return fetch(\"https://superhero-search.p.rapidapi.com/?\"+string, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-host\": heroApihost,\n                \"x-rapidapi-key\": HeroApiAccessKey\n            }\n        }).then(response => this.handleHTTPError(response))\n        .then(response => response.json())\n        .catch(error => console.log(error));\n        \n\n\n        ///const http = new XMLHttpRequest();\n        ///http.open(\"GET\", heroApiENDPOINT+HeroApiAccessToken+string);\n        ///http.send();\n\n        ///http.onload = () => console.log(http.responseText)\n       /// return fetch(heroApiENDPOINT+HeroApiAccessToken+string, {\n        ///    \"method\": \"GET\",\n        ///    }).then(response => this.handleHTTPError(response))\n        ///.then(response => response.json()).then(response => console.log(response))\n        ///.catch(error => console.log(error));\n         \n    }\n\n    handleHTTPError(response) {\n        if(response.ok){\n           return response;}\n        throw Error(response.statusText);\n      }\n    /// Sök bara på namn i en sträng\n    searchHero(name){\n        let data = this.getHeroData(\"hero=\"+name);\n        console.log(data);\n        return data;\n    }\n    /// Sök bara på id i en sträng\n    getHeronID(id){\n        let data = this.getHeroData(\"id=\" + id);\n        return data;\n    }\n\n    addHero(id){\n        this.hero = id;\n        notifyObservers(\"hero was added\");\n    }\n\n    heroGenres(powerstats){\n        /// powerstats = {\"intelligence\":\"81\",\"strength\":\"40\",\"speed\":\"29\",\"durability\":\"55\",\"power\":\"63\",\"combat\":\"90\"};\n        let allstats = powerstats.intelligence + powerstats.strength + powerstats.speed + powerstats.durability + powerstats.combat;\n        let genres = { \"classical\": powerstats.intelligence/allstats, \"punk\":powerstats.strength/allstats, \"pop\": powerstats.speed/allstats , \"lowfy beats\": powerstats.durability/allstats, \"electronic dance\": powerstats.power/allstats, \"hip hop\": powerstats.combat/allstats};\n        return genres;\n    }\n\n    //getPlaylists NEEDS RENDER PROMIS\n    getOthersPlaylistsfromdatabase(){\n        let scoreboard = [];\n        this.db.collection(\"hero-ify\").orderBy().limit(10).get().then((snapshot) => {\n            snapshot.forEach((doc) => {\n                scoreboard.push({\"Hero\": doc.Hero , \"PlaylistLink\": doc.PlaylistLink , \"User\": doc.User})\n            })\n            \n        });\n        return scoreboard;\n    }\n\n    //add a playlist to firebase\n    addYourplaylistToDatabase(heroname, playlistlink, user){\n        this.db.collection(\"hero-ify\").doc().set({\n            Hero: heroname,\n            PlaylistLink: playlistlink,\n            User: user\n            });\n}\n    \n   //spotify playlist function\n    spotifyApiConnect(){\n\n    }\n    //generates a link to create spotify playlist from\n    generateSpotifyPlaylist(){\n\n    }\n\ngetMyTopTracks () {\n    var alltrackstoptracks = []\n    spotifyApi.getMyTopTracks({ limit: 100 }).then(response => {\n        for (var i = 0, l = response.items.length; i < l; i++) {\n        alltrackstoptracks.push(response.items[i])\n        }\n        this.setState({\n        topTracks: alltrackstoptracks\n        })\n    })\n    }\n    \n    \n}\n\n\n\n\nconst heroifyModel = new HeroIfyModel();\nexport default heroifyModel;"]},"metadata":{},"sourceType":"module"}