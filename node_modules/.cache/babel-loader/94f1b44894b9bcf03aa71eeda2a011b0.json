{"ast":null,"code":"import React from \"react\";\nimport { heroApihost, HeroApiAccessKey, firebaseConfig } from \"./apiConfig\";\nimport firebase from \"firebase\";\nimport Spotify from 'spotify-web-api-js';\nconst spotifyApi = new Spotify();\n\nclass HeroIfyModel extends React.Component {\n  constructor() {\n    super();\n    this.subscribers = [];\n    this.hero = {\n      name: \"No hero chosen\"\n    };\n    this.playlistAttributes = {\n      userID: \"\",\n      genres: [],\n      pepLevel: \"\"\n    };\n    firebase.initializeApp(firebaseConfig);\n    this.db = firebase.database();\n  }\n\n  addObserver(callback) {\n    this.subscribers.push(callback);\n  }\n\n  removeObserver(callback) {\n    callback = this.subscribers.filter(o => o !== callback);\n  }\n\n  notifyObservers(whatHappened) {\n    this.subscribers.forEach(function (callback) {\n      callback(whatHappened);\n    });\n  }\n\n  getHeroData(string) {\n    return fetch(\"https://superhero-search.p.rapidapi.com/?\" + string, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": heroApihost,\n        \"x-rapidapi-key\": HeroApiAccessKey\n      }\n    }).then(response => this.handleHTTPError(response)).then(response => response.json()).catch(error => console.log(error)); ///const http = new XMLHttpRequest();\n    ///http.open(\"GET\", heroApiENDPOINT+HeroApiAccessToken+string);\n    ///http.send();\n    ///http.onload = () => console.log(http.responseText)\n    /// return fetch(heroApiENDPOINT+HeroApiAccessToken+string, {\n    ///    \"method\": \"GET\",\n    ///    }).then(response => this.handleHTTPError(response))\n    ///.then(response => response.json()).then(response => console.log(response))\n    ///.catch(error => console.log(error));\n  }\n\n  handleHTTPError(response) {\n    if (response.ok) {\n      return response;\n    }\n\n    throw Error(response.statusText);\n  } /// Sök bara på namn i en sträng\n\n\n  searchHero(name) {\n    let data = this.getHeroData(\"hero=\" + name);\n    console.log(data);\n    return data;\n  } /// Sök bara på id i en sträng\n\n\n  getHeronID(id) {\n    let data = this.getHeroData(\"id=\" + id);\n    return data;\n  }\n\n  setHero(hero) {\n    this.hero = hero;\n    this.notifyObservers(\"hero was added\");\n  }\n\n  getHeroName() {\n    return this.hero.name;\n  }\n\n  getHeroId() {\n    return this.hero.id;\n  }\n\n  heroGenres(powerstats) {\n    /// powerstats = {\"intelligence\":\"81\",\"strength\":\"40\",\"speed\":\"29\",\"durability\":\"55\",\"power\":\"63\",\"combat\":\"90\"};\n    let allstats = powerstats.intelligence + powerstats.strength + powerstats.speed + powerstats.durability + powerstats.combat;\n    let genres = {\n      \"classical\": powerstats.intelligence / allstats,\n      \"punk\": powerstats.strength / allstats,\n      \"pop\": powerstats.speed / allstats,\n      \"lowfy beats\": powerstats.durability / allstats,\n      \"electronic dance\": powerstats.power / allstats,\n      \"hip hop\": powerstats.combat / allstats\n    };\n    return genres;\n  } //getPlaylists NEEDS RENDER PROMIS\n\n\n  getOthersPlaylistsfromdatabase(limit = 5) {\n    let playlists = [];\n    return this.db.ref(\"UserGenereatedPlaylists\").limitToLast(limit).once('value').then(snapshot => {\n      snapshot = snapshot.toJSON();\n      Object.values(snapshot).reverse().forEach(doc => {\n        playlists.push({\n          Hero: doc.Hero,\n          PlaylistLink: doc.PlaylistLink,\n          User: doc.User\n        });\n      });\n      return playlists;\n    });\n  } //add a playlist to firebase\n\n\n  addYourplaylistToDatabase(heroname, playlistlink, user) {\n    this.db.ref(\"UserGenereatedPlaylists/\" + user).set({\n      Hero: heroname,\n      PlaylistLink: playlistlink,\n      User: user\n    });\n  } //spotify playlist function\n\n\n  spotifyApiConnect() {} //generates a link to create spotify playlist from\n\n\n  generateSpotifyPlaylist() {}\n\n  getMyTopTracks() {\n    var alltrackstoptracks = [];\n    spotifyApi.getMyTopTracks({\n      limit: 100\n    }).then(response => {\n      for (var i = 0, l = response.items.length; i < l; i++) {\n        alltrackstoptracks.push(response.items[i]);\n      }\n\n      this.setState({\n        topTracks: alltrackstoptracks\n      });\n    });\n  }\n\n}\n\nconst heroifyModel = new HeroIfyModel();\nexport default heroifyModel;","map":{"version":3,"sources":["/Users/simonsundin/Documents/GitHub/hero-ify/src/modelandconfig/model.js"],"names":["React","heroApihost","HeroApiAccessKey","firebaseConfig","firebase","Spotify","spotifyApi","HeroIfyModel","Component","constructor","subscribers","hero","name","playlistAttributes","userID","genres","pepLevel","initializeApp","db","database","addObserver","callback","push","removeObserver","filter","o","notifyObservers","whatHappened","forEach","getHeroData","string","fetch","then","response","handleHTTPError","json","catch","error","console","log","ok","Error","statusText","searchHero","data","getHeronID","id","setHero","getHeroName","getHeroId","heroGenres","powerstats","allstats","intelligence","strength","speed","durability","combat","power","getOthersPlaylistsfromdatabase","limit","playlists","ref","limitToLast","once","snapshot","toJSON","Object","values","reverse","doc","Hero","PlaylistLink","User","addYourplaylistToDatabase","heroname","playlistlink","user","set","spotifyApiConnect","generateSpotifyPlaylist","getMyTopTracks","alltrackstoptracks","i","l","items","length","setState","topTracks","heroifyModel"],"mappings":"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","sourcesContent":["import React  from \"react\";\nimport {heroApihost, HeroApiAccessKey, firebaseConfig} from \"./apiConfig\"\nimport firebase from \"firebase\";\nimport Spotify from 'spotify-web-api-js'\nconst spotifyApi = new Spotify()\n\nclass HeroIfyModel extends React.Component {\n  constructor () {\n    super()\n    this.subscribers = [];\n    this.hero = {name:\"No hero chosen\"};\n    this.playlistAttributes = {userID:\"\", genres: [], pepLevel:\"\"};\n    firebase.initializeApp(firebaseConfig);\n    this.db = firebase.database();\n\n    \n}\n\n  addObserver (callback) {\n    this.subscribers.push(callback)\n  }\n\n    removeObserver (callback) {\n    callback = this.subscribers.filter(o => o !== callback);\n    };\n   \n    notifyObservers(whatHappened){\n        this.subscribers.forEach(function(callback){ \n            callback(whatHappened);\n       });\n    }\n\n       \n    getHeroData(string) {\n        return fetch(\"https://superhero-search.p.rapidapi.com/?\"+string, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-host\": heroApihost,\n                \"x-rapidapi-key\": HeroApiAccessKey\n            }\n        }).then(response => this.handleHTTPError(response))\n        .then(response => response.json())\n        .catch(error => console.log(error));\n        \n\n\n        ///const http = new XMLHttpRequest();\n        ///http.open(\"GET\", heroApiENDPOINT+HeroApiAccessToken+string);\n        ///http.send();\n\n        ///http.onload = () => console.log(http.responseText)\n       /// return fetch(heroApiENDPOINT+HeroApiAccessToken+string, {\n        ///    \"method\": \"GET\",\n        ///    }).then(response => this.handleHTTPError(response))\n        ///.then(response => response.json()).then(response => console.log(response))\n        ///.catch(error => console.log(error));\n         \n    }\n\n    handleHTTPError(response) {\n        if(response.ok){\n           return response;}\n        throw Error(response.statusText);\n      }\n    /// Sök bara på namn i en sträng\n    searchHero(name){\n        let data = this.getHeroData(\"hero=\" + name);\n        console.log(data)\n        return data;\n    }\n    /// Sök bara på id i en sträng\n    getHeronID(id){\n        let data = this.getHeroData(\"id=\" + id);\n        return data;\n    }\n\n    setHero(hero){\n    \n        this.hero = hero;\n        this.notifyObservers(\"hero was added\");\n    }\n\n    getHeroName(){\n        return this.hero.name;\n    }\n\n    getHeroId(){\n        return this.hero.id;\n    }\n\n    heroGenres(powerstats){\n        /// powerstats = {\"intelligence\":\"81\",\"strength\":\"40\",\"speed\":\"29\",\"durability\":\"55\",\"power\":\"63\",\"combat\":\"90\"};\n        let allstats = powerstats.intelligence + powerstats.strength + powerstats.speed + powerstats.durability + powerstats.combat;\n        let genres = { \"classical\": powerstats.intelligence/allstats, \"punk\":powerstats.strength/allstats, \"pop\": powerstats.speed/allstats , \"lowfy beats\": powerstats.durability/allstats, \"electronic dance\": powerstats.power/allstats, \"hip hop\": powerstats.combat/allstats};\n        return genres;\n    }\n\n    //getPlaylists NEEDS RENDER PROMIS\n    getOthersPlaylistsfromdatabase(limit=5){\n        let playlists = [];\n        return this.db.ref(\"UserGenereatedPlaylists\").limitToLast(limit).once('value').then((snapshot) => {\n            snapshot = snapshot.toJSON();\n            Object.values(snapshot).reverse().forEach((doc) => {\n                playlists.push({Hero: doc.Hero, PlaylistLink:doc.PlaylistLink, User:doc.User})\n            })\n            return playlists;\n        })\n        \n        \n    }\n\n    //add a playlist to firebase\n    addYourplaylistToDatabase(heroname, playlistlink, user){\n        this.db.ref(\"UserGenereatedPlaylists/\"+user).set({\n            Hero: heroname,\n            PlaylistLink: playlistlink,\n            User: user\n            });\n}\n    \n   //spotify playlist function\n    spotifyApiConnect(){\n\n    }\n    //generates a link to create spotify playlist from\n    generateSpotifyPlaylist(){\n\n    }\n\ngetMyTopTracks () {\n    var alltrackstoptracks = []\n    spotifyApi.getMyTopTracks({ limit: 100 }).then(response => {\n        for (var i = 0, l = response.items.length; i < l; i++) {\n        alltrackstoptracks.push(response.items[i])\n        }\n        this.setState({\n        topTracks: alltrackstoptracks\n        })\n    })\n    }\n    \n    \n}\n\n\n\n\nconst heroifyModel = new HeroIfyModel();\nexport default heroifyModel;"]},"metadata":{},"sourceType":"module"}