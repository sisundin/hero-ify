{"ast":null,"code":"import React from \"react\";\nimport { heroApihost, HeroApiAccessKey, firebaseConfig } from \"./apiConfig\";\nimport firebase from \"firebase\";\n\nclass HeroIfyModel extends React.Component {\n  constructor() {\n    super();\n    this.subscribers = [];\n    this.playlistAttributes = {\n      userID: \"\",\n      genres: [],\n      pepLevel: \"\"\n    };\n    this.firebase = new firebase.initializeApp(firebaseConfig);\n    this.db = this.firebase.firestore();\n  }\n\n  addObserver(callback) {\n    this.subscribers.push(callback);\n  }\n\n  removeObserver(callback) {\n    callback = this.subscribers.filter(o => o !== callback);\n  }\n\n  notifyObservers(whatHappened) {\n    this.subscribers.forEach(function (callback) {\n      callback(whatHappened);\n    });\n  }\n\n  getHeroData(string) {\n    return fetch(\"https://superhero-search.p.rapidapi.com/?\" + string, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": heroApihost,\n        \"x-rapidapi-key\": HeroApiAccessKey\n      }\n    }).then(response => this.handleHTTPError(response)).then(response => response.json()).catch(error => console.log(error)); ///const http = new XMLHttpRequest();\n    ///http.open(\"GET\", heroApiENDPOINT+HeroApiAccessToken+string);\n    ///http.send();\n    ///http.onload = () => console.log(http.responseText)\n    /// return fetch(heroApiENDPOINT+HeroApiAccessToken+string, {\n    ///    \"method\": \"GET\",\n    ///    }).then(response => this.handleHTTPError(response))\n    ///.then(response => response.json()).then(response => console.log(response))\n    ///.catch(error => console.log(error));\n  }\n\n  handleHTTPError(response) {\n    if (response.ok) {\n      return response;\n    }\n\n    throw Error(response.statusText);\n  }\n\n  searchHero(name) {\n    let data = this.getHeroData(\"hero=\" + name);\n    console.log(data);\n    return data;\n  }\n\n  getHeroonID(id) {\n    let data = this.getHeroData(\"id=\" + id);\n    return data;\n  }\n\n  heroGenres(powerstats) {\n    /// powerstats = {\"intelligence\":\"81\",\"strength\":\"40\",\"speed\":\"29\",\"durability\":\"55\",\"power\":\"63\",\"combat\":\"90\"};\n    let allstats = powerstats.intelligence + powerstats.strength + powerstats.speed + powerstats.durability + powerstats.combat;\n    let genres = {\n      \"classical\": powerstats.intelligence / allstats,\n      \"punk\": powerstats.strength / allstats,\n      \"pop\": powerstats.speed / allstats,\n      \"lowfy beats\": powerstats.durability / allstats,\n      \"electronic dance\": powerstats.power / allstats,\n      \"hip hop\": powerstats.combat / allstats\n    };\n    return genres;\n  } //getPlaylists NEEDS RENDER PROMIS\n\n\n  getOthersPlaylistsfromdatabase() {\n    let scoreboard = [];\n    this.db.collection(\"created playlists\").orderBy(\"Hero\", \"desc\").limit(10).get().then(snapshot => {\n      snapshot.forEach(doc => {\n        scoreboard.push({\n          \"Hero\": doc.Hero,\n          \"PlaylistLink\": doc.PlaylistLink,\n          \"User\": doc.User\n        });\n      });\n    });\n    return scoreboard;\n  } //add a playlist to firebase\n\n\n  addYourplaylistToDatabase(heroname, playlistlink, user) {\n    this.db.collection(\"created playlists\").doc().set({\n      Hero: heroname,\n      PlaylistLink: playlistlink,\n      User: user\n    });\n  } //spotify playlist function\n\n\n  spotifyApiConnect() {} //generates a link to create spotify playlist from\n\n\n  generateSpotifyPlaylist() {}\n\n}\n\nconst heroifyModel = new HeroIfyModel();\nexport default heroifyModel;","map":{"version":3,"sources":["/Users/simonsundin/Documents/GitHub/hero-ify/src/modelandconfig/model.js"],"names":["React","heroApihost","HeroApiAccessKey","firebaseConfig","firebase","HeroIfyModel","Component","constructor","subscribers","playlistAttributes","userID","genres","pepLevel","initializeApp","db","firestore","addObserver","callback","push","removeObserver","filter","o","notifyObservers","whatHappened","forEach","getHeroData","string","fetch","then","response","handleHTTPError","json","catch","error","console","log","ok","Error","statusText","searchHero","name","data","getHeroonID","id","heroGenres","powerstats","allstats","intelligence","strength","speed","durability","combat","power","getOthersPlaylistsfromdatabase","scoreboard","collection","orderBy","limit","get","snapshot","doc","Hero","PlaylistLink","User","addYourplaylistToDatabase","heroname","playlistlink","user","set","spotifyApiConnect","generateSpotifyPlaylist","heroifyModel"],"mappings":"AAAA,OAAOA,KAAP,MAAmB,OAAnB;AACA,SAAQC,WAAR,EAAqBC,gBAArB,EAAuCC,cAAvC,QAA4D,aAA5D;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA0C;AACtCC,EAAAA,WAAW,GAAE;AACT;AAEA,SAAKC,WAAL,GAAiB,EAAjB;AACA,SAAKC,kBAAL,GAA0B;AAACC,MAAAA,MAAM,EAAC,EAAR;AAAYC,MAAAA,MAAM,EAAE,EAApB;AAAwBC,MAAAA,QAAQ,EAAC;AAAjC,KAA1B;AACA,SAAKR,QAAL,GAAgB,IAAIA,QAAQ,CAACS,aAAb,CAA2BV,cAA3B,CAAhB;AACA,SAAKW,EAAL,GAAU,KAAKV,QAAL,CAAcW,SAAd,EAAV;AACC;;AAELC,EAAAA,WAAW,CAACC,QAAD,EAAU;AACjB,SAAKT,WAAL,CAAiBU,IAAjB,CAAsBD,QAAtB;AACN;;AAEEE,EAAAA,cAAc,CAAEF,QAAF,EAAY;AAC1BA,IAAAA,QAAQ,GAAG,KAAKT,WAAL,CAAiBY,MAAjB,CAAwBC,CAAC,IAAIA,CAAC,KAAKJ,QAAnC,CAAX;AACC;;AAEDK,EAAAA,eAAe,CAACC,YAAD,EAAc;AACzB,SAAKf,WAAL,CAAiBgB,OAAjB,CAAyB,UAASP,QAAT,EAAkB;AACvCA,MAAAA,QAAQ,CAACM,YAAD,CAAR;AACJ,KAFA;AAGH;;AAGDE,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,WAAOC,KAAK,CAAC,8CAA4CD,MAA7C,EAAqD;AAC7D,gBAAU,KADmD;AAE7D,iBAAW;AACP,2BAAmBzB,WADZ;AAEP,0BAAkBC;AAFX;AAFkD,KAArD,CAAL,CAMJ0B,IANI,CAMCC,QAAQ,IAAI,KAAKC,eAAL,CAAqBD,QAArB,CANb,EAOND,IAPM,CAODC,QAAQ,IAAIA,QAAQ,CAACE,IAAT,EAPX,EAQNC,KARM,CAQAC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CART,CAAP,CADgB,CAahB;AACA;AACA;AAEA;AACD;AACC;AACA;AACA;AACA;AAEH;;AAEDH,EAAAA,eAAe,CAACD,QAAD,EAAW;AACtB,QAAGA,QAAQ,CAACO,EAAZ,EAAe;AACZ,aAAOP,QAAP;AAAiB;;AACpB,UAAMQ,KAAK,CAACR,QAAQ,CAACS,UAAV,CAAX;AACD;;AAEHC,EAAAA,UAAU,CAACC,IAAD,EAAM;AAEZ,QAAIC,IAAI,GAAG,KAAKhB,WAAL,CAAiB,UAAQe,IAAzB,CAAX;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYM,IAAZ;AACA,WAAOA,IAAP;AACH;;AAEDC,EAAAA,WAAW,CAACC,EAAD,EAAI;AACX,QAAIF,IAAI,GAAG,KAAKhB,WAAL,CAAiB,QAAQkB,EAAzB,CAAX;AACA,WAAOF,IAAP;AACH;;AAEDG,EAAAA,UAAU,CAACC,UAAD,EAAY;AAClB;AACA,QAAIC,QAAQ,GAAGD,UAAU,CAACE,YAAX,GAA0BF,UAAU,CAACG,QAArC,GAAgDH,UAAU,CAACI,KAA3D,GAAmEJ,UAAU,CAACK,UAA9E,GAA2FL,UAAU,CAACM,MAArH;AACA,QAAIxC,MAAM,GAAG;AAAE,mBAAakC,UAAU,CAACE,YAAX,GAAwBD,QAAvC;AAAiD,cAAOD,UAAU,CAACG,QAAX,GAAoBF,QAA5E;AAAsF,aAAOD,UAAU,CAACI,KAAX,GAAiBH,QAA9G;AAAyH,qBAAeD,UAAU,CAACK,UAAX,GAAsBJ,QAA9J;AAAwK,0BAAoBD,UAAU,CAACO,KAAX,GAAiBN,QAA7M;AAAuN,iBAAWD,UAAU,CAACM,MAAX,GAAkBL;AAApP,KAAb;AACA,WAAOnC,MAAP;AACH,GA1EqC,CA4EtC;;;AACA0C,EAAAA,8BAA8B,GAAE;AAC5B,QAAIC,UAAU,GAAG,EAAjB;AACA,SAAKxC,EAAL,CAAQyC,UAAR,CAAmB,mBAAnB,EAAwCC,OAAxC,CAAgD,MAAhD,EAAwD,MAAxD,EAAgEC,KAAhE,CAAsE,EAAtE,EAA0EC,GAA1E,GAAgF9B,IAAhF,CAAsF+B,QAAD,IAAc;AAC/FA,MAAAA,QAAQ,CAACnC,OAAT,CAAkBoC,GAAD,IAAS;AACtBN,QAAAA,UAAU,CAACpC,IAAX,CAAgB;AAAC,kBAAQ0C,GAAG,CAACC,IAAb;AAAoB,0BAAgBD,GAAG,CAACE,YAAxC;AAAuD,kBAAQF,GAAG,CAACG;AAAnE,SAAhB;AACH,OAFD;AAIH,KALD;AAMA,WAAOT,UAAP;AACH,GAtFqC,CAwFtC;;;AACAU,EAAAA,yBAAyB,CAACC,QAAD,EAAWC,YAAX,EAAyBC,IAAzB,EAA8B;AACnD,SAAKrD,EAAL,CAAQyC,UAAR,CAAmB,mBAAnB,EAAwCK,GAAxC,GAA8CQ,GAA9C,CAAkD;AAC9CP,MAAAA,IAAI,EAAEI,QADwC;AAE9CH,MAAAA,YAAY,EAAEI,YAFgC;AAG9CH,MAAAA,IAAI,EAAEI;AAHwC,KAAlD;AAMP,GAhGyC,CAkGvC;;;AACCE,EAAAA,iBAAiB,GAAE,CAElB,CArGqC,CAsGtC;;;AACAC,EAAAA,uBAAuB,GAAE,CAExB;;AAzGqC;;AA6G1C,MAAMC,YAAY,GAAG,IAAIlE,YAAJ,EAArB;AACA,eAAekE,YAAf","sourcesContent":["import React  from \"react\";\nimport {heroApihost, HeroApiAccessKey, firebaseConfig} from \"./apiConfig\"\nimport firebase from \"firebase\";\n\nclass HeroIfyModel extends React.Component{\n    constructor(){\n        super();\n        \n        this.subscribers=[];\n        this.playlistAttributes = {userID:\"\", genres: [], pepLevel:\"\" }\n        this.firebase = new firebase.initializeApp(firebaseConfig);\n        this.db = this.firebase.firestore();\n        }\n        \n    addObserver(callback){\n        this.subscribers.push(callback);\n }\n\n    removeObserver (callback) {\n    callback = this.subscribers.filter(o => o !== callback);\n    };\n   \n    notifyObservers(whatHappened){\n        this.subscribers.forEach(function(callback){ \n            callback(whatHappened);\n       });\n    }\n\n       \n    getHeroData(string) {\n        return fetch(\"https://superhero-search.p.rapidapi.com/?\"+string, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-host\": heroApihost,\n                \"x-rapidapi-key\": HeroApiAccessKey\n            }\n        }).then(response => this.handleHTTPError(response))\n        .then(response => response.json())\n        .catch(error => console.log(error));\n        \n\n\n        ///const http = new XMLHttpRequest();\n        ///http.open(\"GET\", heroApiENDPOINT+HeroApiAccessToken+string);\n        ///http.send();\n\n        ///http.onload = () => console.log(http.responseText)\n       /// return fetch(heroApiENDPOINT+HeroApiAccessToken+string, {\n        ///    \"method\": \"GET\",\n        ///    }).then(response => this.handleHTTPError(response))\n        ///.then(response => response.json()).then(response => console.log(response))\n        ///.catch(error => console.log(error));\n         \n    }\n\n    handleHTTPError(response) {\n        if(response.ok){\n           return response;}\n        throw Error(response.statusText);\n      }\n\n    searchHero(name){\n\n        let data = this.getHeroData(\"hero=\"+name);\n        console.log(data);\n        return data;\n    }\n\n    getHeroonID(id){\n        let data = this.getHeroData(\"id=\" + id);\n        return data;\n    }\n\n    heroGenres(powerstats){\n        /// powerstats = {\"intelligence\":\"81\",\"strength\":\"40\",\"speed\":\"29\",\"durability\":\"55\",\"power\":\"63\",\"combat\":\"90\"};\n        let allstats = powerstats.intelligence + powerstats.strength + powerstats.speed + powerstats.durability + powerstats.combat;\n        let genres = { \"classical\": powerstats.intelligence/allstats, \"punk\":powerstats.strength/allstats, \"pop\": powerstats.speed/allstats , \"lowfy beats\": powerstats.durability/allstats, \"electronic dance\": powerstats.power/allstats, \"hip hop\": powerstats.combat/allstats};\n        return genres;\n    }\n\n    //getPlaylists NEEDS RENDER PROMIS\n    getOthersPlaylistsfromdatabase(){\n        let scoreboard = []\n        this.db.collection(\"created playlists\").orderBy(\"Hero\", \"desc\").limit(10).get().then((snapshot) => {\n            snapshot.forEach((doc) => {\n                scoreboard.push({\"Hero\": doc.Hero , \"PlaylistLink\": doc.PlaylistLink , \"User\": doc.User})\n            })\n            \n        });\n        return scoreboard;\n    }\n\n    //add a playlist to firebase\n    addYourplaylistToDatabase(heroname, playlistlink, user){\n        this.db.collection(\"created playlists\").doc().set({\n            Hero: heroname,\n            PlaylistLink: playlistlink,\n            User: user\n            \n    });\n}\n    \n   //spotify playlist function\n    spotifyApiConnect(){\n\n    }\n    //generates a link to create spotify playlist from\n    generateSpotifyPlaylist(){\n\n    }\n    \n}\n\nconst heroifyModel = new HeroIfyModel();\nexport default heroifyModel;"]},"metadata":{},"sourceType":"module"}