{"ast":null,"code":"import React from \"react\";\nimport { heroApihost, HeroApiAccessKey, firebaseConfig } from \"./apiConfig\";\nimport firebase from \"firebase\";\nimport Spotify from \"spotify-web-api-js\";\nconst spotifyApi = new Spotify();\n\nclass HeroIfyModel extends React.Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    this.subscribers = [];\n    this.hero = {\n      name: \"You need to pick a hero!\"\n    };\n    this.playlistAttributes = {\n      userID: \"\",\n      genres: [],\n      pepLevel: \"\"\n    };\n    firebase.initializeApp(firebaseConfig);\n    this.db = firebase.database();\n\n    if (params.access_token) {\n      spotifyApi.setAccessToken(params.access_token);\n    }\n\n    this.state = {\n      loggedIn: params.access_token ? true : false\n    };\n  }\n\n  addObserver(callback) {\n    this.subscribers.push(callback);\n  }\n\n  removeObserver(callback) {\n    callback = this.subscribers.filter(o => o !== callback);\n  }\n\n  notifyObservers(whatHappened) {\n    this.subscribers.forEach(function (callback) {\n      callback(whatHappened);\n    });\n  }\n\n  getHeroData(string) {\n    return fetch(\"https://superhero-search.p.rapidapi.com/?\" + string, {\n      method: \"GET\",\n      headers: {\n        \"x-rapidapi-host\": heroApihost,\n        \"x-rapidapi-key\": HeroApiAccessKey\n      }\n    }).then(response => this.handleHTTPError(response)).then(response => response.json()).catch(error => console.log(error)); ///const http = new XMLHttpRequest();\n    ///http.open(\"GET\", heroApiENDPOINT+HeroApiAccessToken+string);\n    ///http.send();\n    ///http.onload = () => console.log(http.responseText)\n    /// return fetch(heroApiENDPOINT+HeroApiAccessToken+string, {\n    ///    \"method\": \"GET\",\n    ///    }).then(response => this.handleHTTPError(response))\n    ///.then(response => response.json()).then(response => console.log(response))\n    ///.catch(error => console.log(error));\n  }\n\n  handleHTTPError(response) {\n    if (response.ok) {\n      return response;\n    }\n\n    throw Error(response.statusText);\n  } /// Sök bara på namn i en sträng\n\n\n  searchHero(name) {\n    let data = this.getHeroData(\"hero=\" + name);\n    console.log(data);\n    return data;\n  } /// Sök bara på id i en sträng\n\n\n  getHeronID(id) {\n    let data = this.getHeroData(\"id=\" + id);\n    return data;\n  }\n\n  setHero(hero) {\n    this.hero = hero;\n    this.notifyObservers(\"hero was added\");\n  }\n\n  getHeroName() {\n    return this.hero.name;\n  }\n\n  getHeroId() {\n    return this.hero.id;\n  }\n\n  heroGenres(powerstats) {\n    /// powerstats = {\"intelligence\":\"81\",\"strength\":\"40\",\"speed\":\"29\",\"durability\":\"55\",\"power\":\"63\",\"combat\":\"90\"};\n    let allstats = powerstats.intelligence + powerstats.strength + powerstats.speed + powerstats.durability + powerstats.combat;\n    let genres = {\n      classical: powerstats.intelligence / allstats,\n      punk: powerstats.strength / allstats,\n      pop: powerstats.speed / allstats,\n      \"lowfy beats\": powerstats.durability / allstats,\n      \"electronic dance\": powerstats.power / allstats,\n      \"hip hop\": powerstats.combat / allstats\n    };\n    return genres;\n  } //getPlaylists NEEDS RENDER PROMIS\n\n\n  getOthersPlaylistsfromdatabase(limit = 5) {\n    let playlists = [];\n    return this.db.ref(\"UserGenereatedPlaylists\").limitToLast(limit).once(\"value\").then(snapshot => {\n      snapshot = snapshot.toJSON();\n      Object.values(snapshot).reverse().forEach(doc => {\n        playlists.push({\n          Hero: doc.Hero,\n          PlaylistLink: doc.PlaylistLink,\n          User: doc.User\n        });\n      });\n      return playlists;\n    });\n  } //add a playlist to firebase\n\n\n  addYourplaylistToDatabase(heroname, playlistlink, user) {\n    this.db.ref(\"UserGenereatedPlaylists/\" + user).set({\n      Hero: heroname,\n      PlaylistLink: playlistlink,\n      User: user\n    });\n  } //spotify playlist function\n\n\n  spotifyApiConnect() {} //generates a link to create spotify playlist from\n\n\n  generateSpotifyPlaylist() {}\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n        r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    e = r.exec(q);\n\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n\n    return hashParams;\n  }\n\n  getMyTopTracks() {\n    var alltrackstoptracks = [];\n    spotifyApi.getMyTopTracks({\n      limit: 100\n    }).then(response => {\n      for (var i = 0, l = response.items.length; i < l; i++) {\n        alltrackstoptracks.push(response.items[i]);\n      }\n    });\n    return alltrackstoptracks;\n  }\n\n}\n\nconst heroifyModel = new HeroIfyModel();\nexport default heroifyModel;","map":{"version":3,"sources":["/Users/mariajacobson/Desktop/iprog/project/hero-ify/src/modelandconfig/model.js"],"names":["React","heroApihost","HeroApiAccessKey","firebaseConfig","firebase","Spotify","spotifyApi","HeroIfyModel","Component","constructor","params","getHashParams","subscribers","hero","name","playlistAttributes","userID","genres","pepLevel","initializeApp","db","database","access_token","setAccessToken","state","loggedIn","addObserver","callback","push","removeObserver","filter","o","notifyObservers","whatHappened","forEach","getHeroData","string","fetch","method","headers","then","response","handleHTTPError","json","catch","error","console","log","ok","Error","statusText","searchHero","data","getHeronID","id","setHero","getHeroName","getHeroId","heroGenres","powerstats","allstats","intelligence","strength","speed","durability","combat","classical","punk","pop","power","getOthersPlaylistsfromdatabase","limit","playlists","ref","limitToLast","once","snapshot","toJSON","Object","values","reverse","doc","Hero","PlaylistLink","User","addYourplaylistToDatabase","heroname","playlistlink","user","set","spotifyApiConnect","generateSpotifyPlaylist","hashParams","e","r","q","window","location","hash","substring","exec","decodeURIComponent","getMyTopTracks","alltrackstoptracks","i","l","items","length","heroifyModel"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { heroApihost, HeroApiAccessKey, firebaseConfig } from \"./apiConfig\";\nimport firebase from \"firebase\";\nimport Spotify from \"spotify-web-api-js\";\nconst spotifyApi = new Spotify();\n\nclass HeroIfyModel extends React.Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    this.subscribers = [];\n    this.hero = { name: \"You need to pick a hero!\" };\n    this.playlistAttributes = { userID: \"\", genres: [], pepLevel: \"\" };\n    firebase.initializeApp(firebaseConfig);\n    this.db = firebase.database();\n\n    if (params.access_token) {\n      spotifyApi.setAccessToken(params.access_token);\n    }\n    this.state = {\n      loggedIn: params.access_token ? true : false\n    };\n  }\n\n  addObserver(callback) {\n    this.subscribers.push(callback);\n  }\n\n  removeObserver(callback) {\n    callback = this.subscribers.filter(o => o !== callback);\n  }\n\n  notifyObservers(whatHappened) {\n    this.subscribers.forEach(function(callback) {\n      callback(whatHappened);\n    });\n  }\n\n  getHeroData(string) {\n    return fetch(\"https://superhero-search.p.rapidapi.com/?\" + string, {\n      method: \"GET\",\n      headers: {\n        \"x-rapidapi-host\": heroApihost,\n        \"x-rapidapi-key\": HeroApiAccessKey\n      }\n    })\n      .then(response => this.handleHTTPError(response))\n      .then(response => response.json())\n      .catch(error => console.log(error));\n\n    ///const http = new XMLHttpRequest();\n    ///http.open(\"GET\", heroApiENDPOINT+HeroApiAccessToken+string);\n    ///http.send();\n\n    ///http.onload = () => console.log(http.responseText)\n    /// return fetch(heroApiENDPOINT+HeroApiAccessToken+string, {\n    ///    \"method\": \"GET\",\n    ///    }).then(response => this.handleHTTPError(response))\n    ///.then(response => response.json()).then(response => console.log(response))\n    ///.catch(error => console.log(error));\n  }\n\n  handleHTTPError(response) {\n    if (response.ok) {\n      return response;\n    }\n    throw Error(response.statusText);\n  }\n  /// Sök bara på namn i en sträng\n  searchHero(name) {\n    let data = this.getHeroData(\"hero=\" + name);\n    console.log(data);\n    return data;\n  }\n  /// Sök bara på id i en sträng\n  getHeronID(id) {\n    let data = this.getHeroData(\"id=\" + id);\n    return data;\n  }\n\n  setHero(hero) {\n    this.hero = hero;\n    this.notifyObservers(\"hero was added\");\n  }\n\n  getHeroName() {\n    return this.hero.name;\n  }\n\n  getHeroId() {\n    return this.hero.id;\n  }\n\n  heroGenres(powerstats) {\n    /// powerstats = {\"intelligence\":\"81\",\"strength\":\"40\",\"speed\":\"29\",\"durability\":\"55\",\"power\":\"63\",\"combat\":\"90\"};\n    let allstats =\n      powerstats.intelligence +\n      powerstats.strength +\n      powerstats.speed +\n      powerstats.durability +\n      powerstats.combat;\n    let genres = {\n      classical: powerstats.intelligence / allstats,\n      punk: powerstats.strength / allstats,\n      pop: powerstats.speed / allstats,\n      \"lowfy beats\": powerstats.durability / allstats,\n      \"electronic dance\": powerstats.power / allstats,\n      \"hip hop\": powerstats.combat / allstats\n    };\n    return genres;\n  }\n\n  //getPlaylists NEEDS RENDER PROMIS\n  getOthersPlaylistsfromdatabase(limit = 5) {\n    let playlists = [];\n    return this.db\n      .ref(\"UserGenereatedPlaylists\")\n      .limitToLast(limit)\n      .once(\"value\")\n      .then(snapshot => {\n        snapshot = snapshot.toJSON();\n        Object.values(snapshot)\n          .reverse()\n          .forEach(doc => {\n            playlists.push({\n              Hero: doc.Hero,\n              PlaylistLink: doc.PlaylistLink,\n              User: doc.User\n            });\n          });\n        return playlists;\n      });\n  }\n\n  //add a playlist to firebase\n  addYourplaylistToDatabase(heroname, playlistlink, user) {\n    this.db.ref(\"UserGenereatedPlaylists/\" + user).set({\n      Hero: heroname,\n      PlaylistLink: playlistlink,\n      User: user\n    });\n  }\n\n  //spotify playlist function\n  spotifyApiConnect() {}\n  //generates a link to create spotify playlist from\n  generateSpotifyPlaylist() {}\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n      r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    e = r.exec(q);\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  getMyTopTracks() {\n    var alltrackstoptracks = [];\n    spotifyApi.getMyTopTracks({ limit: 100 }).then(response => {\n      for (var i = 0, l = response.items.length; i < l; i++) {\n        alltrackstoptracks.push(response.items[i]);\n      }\n    });\n    return alltrackstoptracks;\n  }\n}\n\nconst heroifyModel = new HeroIfyModel();\nexport default heroifyModel;\n"]},"metadata":{},"sourceType":"module"}